# Compass 2020.X - Adjectives and Properties

Properties are useful to describe things. In broad strokes, we want to be able to say:

    A box can have a color. A color is one of black, white, green, fushia.

And then later say:

    A parcel is a box in the living room, which is white.

There, ideally, compass should figure out that white is not just any adjective (which we can put
in a "unqualified" adjectives array, like `box.adjective`). Instead, we should have a field in
the `Box` class that holds what is essentially an enum. We need to establish 1) a way to represent
these things at the machine level, and 2) how the inference engine and parser recognise these
enum constants.

## Runtime representation

At runtime, we need to know:

 - The type of an enum field (AKA the specific enum we are talking about)
 - Which of the enum's values the field currently holds
 - The string representation for each of these values.

Or maybe we don't. Enum fields can hold integers. Bytecode can be generated (AFAIK) that links that
integer to a constant array stored in the story/context structure. In that case, the whole process
looks like this:

 - When an enum is declared, create an array of its possible values
 - Store the array in InferEngine's tables, keep the name of the property around.
 - When a property is given to an object, add an int field for it.
 
 - When a property is set, get the name, check that we have the value in the possible strings.
 - Assign the index of the value to the field.
 
 - At runtime:
     - print **Problem: we need to know the type/name here**
     - enum\_to\_s  opcode ? takes an field, pushes the string value on stack?
