# The Compass Virtual Machine

Compass 2.0 relies on a bytecode-based virtual machine instead of hard-coded data structures,
opening the way to more flexibility in what stories can do.

## 1. General Architecture

CVRT is a stack-based, dynamically-typed virtual machine. Values can be one of:

    - boolean (yes or no)
    - number (64-bit float)
    - `Object` (reference-semantics)
    - text (UTF-8 string)
    - Array (dynamic vector of `Object`)

Every type of values, save for `Object` and `Array`, have value semantics. Reference values are
managed by a garbage collector.

There are three main areas of memory managed by the virtual machine:

    - The constant pool, read from a story file. It is immutable.
    - The operand stack is used by the virtual machine to store temporary operation results.
    - A global memory array. Globals garbage collected and indexed.

## 2. Operation

The aim of the CVRT is to provide a platform flexible enough to allow for a wide range of stories
to be written. It is however geared towards "classic" interactive fiction, which is reflected by
some operation codes.

### 2.1. Object Model

CVRT has a prototype-based object model. There are no classes, only objects. Objects are created
by instantiating `Object`, by deriving from another *prototype* object, or by cloning an existing
object. All objects have a kind, which is just a string desccribing the object.

Deriving and cloning have subtle differences: deriving adds the new object to the end of the
prototype chain. Fields are copied from the prototype, and calling `code_isa` on the object with
the prototype's kind will yield `true`. Cloning however copies the passed object, and creates an
object of the **same** kind.
