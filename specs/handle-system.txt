# Compass Handle System

We need a simple handle system to manage entity relationships. At the moment, unique IDs are strings (lowercased entity name). This is good for speed (allows us to use that as the key into the entity map) and it allows us to create a 'test' handle from user input to check if that exists.

Now, we need to be able to save these handles to file and read them back in, reliably. Since handles are `std::string`, they are not in the Story object's string pool, which means they can't be put in the binary file's pool without some suboptimal gymnastics.

Ideally then, we need stable handles. Could be indices into an entity array, but that removes the ability to easily check names at runtime. One way to fix that is have a repeatable algorithm that maps any name in N to a handle in H (N -> H), where a handle represents one and only one name. Hashing algorithms risk collisions.

Another option is to switch everything to StringID, and save that to disk.

Finally, we could create an ID pool for writing and reading only, reading back into textual IDs at run time.
