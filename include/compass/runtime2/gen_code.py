#!/usr/bin/env python3

from sys import argv
import re

def main():
    if len(argv) != 3:
        print('gen_code [opcode_defs] [out_file]')
        return

    _, in_fname, out_fname = argv

    p = re.compile(r'\s{2,}')

    with open(in_fname, 'r') as input, open(out_fname, 'w') as out:

        out.write('// generated by gen_code.py\n')
        out.write('#pragma once\n')

        state = 0

        headers = dict()
        instr = 0
        for line in (l.strip() for l in input):
            if not len(line): continue

            if state == 0:

                fields = p.split(line)
                for i, f in enumerate(fields): headers[f] = i
                if not 'code' in headers: exit('missing column in def file: code')
                if not 'stack' in headers: exit('missing column in def file: stack')
                if not 'operands' in headers: exit('missing column in def file: operands')
                state = 1

            elif state == 1:
                if not line.startswith('======'):
                    exit('missing separator')
                state = 2

            elif state == 2:
                fields = p.split(line)
                # if len(fields) != len(headers): exit('line does not match headers')

                code = fields[headers['code']]
                ops = int(fields[headers['operands']])
                stack = int(fields[headers['stack']])
                out.write('OPCODE(%-10s, 0x%02x, %+3d, %+3d)' % (code, instr, ops, stack))

                if 'comments' in headers and len(fields) > headers['comments']:
                    out.write(' // %s' % fields[headers['comments']])
                out.write('\n')
                instr += 1
        out.write('\n')

if __name__ == '__main__':
    main()
