// generated by gen_code.py
#pragma once
OPCODE(halt      , 0x00,  +0,  +0) // halts the virtual machine
OPCODE(cload     , 0x01,  +1,  +1) // pushes a constant on the stack
OPCODE(vload     , 0x02,  +1,  +1) // pushes a global on the stack
OPCODE(aload     , 0x03,  +0,  -1) // pops an array reference and index, and pushes the array item
OPCODE(vstore    , 0x04,  +1,  -1) // pops a value from the stack into a global
OPCODE(astore    , 0x05,  +0,  -3) // pops a value into an array slot
OPCODE(drop      , 0x06,  +0,  -1) // removes the top-of-stack.
OPCODE(dup       , 0x07,  +0,  +1) // duplicates the item on TOS.
OPCODE(amake     , 0x08,  +1,  +1) // creates an array and pushes a reference to it
OPCODE(adel      , 0x09,  +0,  -1) // deletes an array pointed to by the TOS
OPCODE(cclone    , 0x0a,  +0,  +1) // creates a copy of a constant pool object on TOS
OPCODE(mclone    , 0x0b,  +0,  +1) // creates a copy of a dynamic memory object on TOS
OPCODE(cmake     , 0x0c,  +0,  +0) // creates an instance of a constant pool prototype on TOS
OPCODE(mmake     , 0x0d,  +0,  +0) // creates an instance of a dynamic memory prototype on TOS
OPCODE(del       , 0x0e,  +0,  -1) // frees the memory used by an object on TOS
OPCODE(iowrite   , 0x0f,  +0,  -1) // writes the top of stack to the IO device
OPCODE(ioread    , 0x10,  +0,  +1) // reads a line of text from the IO device onto the stack
OPCODE(iostyle   , 0x11,  +1,  +0) // sets the IO device style
OPCODE(i2s       , 0x12,  +0,  +0) // converts the TOS from integer to string
OPCODE(i2f       , 0x13,  +0,  +0)
OPCODE(f2s       , 0x14,  +0,  +0)
OPCODE(f2i       , 0x15,  +0,  +0)
OPCODE(p2s       , 0x16,  +0,  +0) // converts the TOS from property reference to string
OPCODE(addi      , 0x17,  +0,  -1) // adds two integers
OPCODE(subi      , 0x18,  +0,  -1) // subtracts an integer from another
OPCODE(muli      , 0x19,  +0,  -1) // multiplies two integers
OPCODE(divi      , 0x1a,  +0,  -1) // divides an integer by another
OPCODE(addf      , 0x1b,  +0,  -1) // adds two floats
OPCODE(subf      , 0x1c,  +0,  -1) // subtracts an float from another
OPCODE(mulf      , 0x1d,  +0,  -1) // multiplies two floats
OPCODE(divf      , 0x1e,  +0,  -1) // divides an float by another

